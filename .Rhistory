library(tsoutliers)
install.packages("ggplot2")
install.packages(ggplot2)
install.packages(corrplot)
install.packages(infotheo)
install.packages(tsoutliers)
install.packages(caTools)
install.packages(dplyr)
install.packages(neuralnet)
install.packages(car)
install.packages(lmtest)
install.packages(scales)
install.packages(NbClust)
install.packages(purrr)
install.package(ggplot2)
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
install.packages(corrplot)
install.package(corrplot)
install.packages("corrplot")
install.packages(c("ggplot2", "corrplot"))
t <- 0:100  # time
sig2 <- 0.01
## first, simulate a set of random deviates
x <- rnorm(n = length(t) - 1, sd = sqrt(sig2))
## now compute their cumulative sum
x <- c(0, cumsum(x))
plot(t, x, type = "l", ylim = c(-2, 2))
x <- fastBM(tree, sig2 = sig2, internal = TRUE)
phenogram(tree, x, spread.labels = TRUE, spread.cost = c(1, 0))
x <- fastBM(tree, sig2 = sig2, internal = TRUE)
phenogram(tree, x, spread.labels = TRUE, spread.cost = c(1, 0))
packages(phytools)
package(phytools)
library(ggplot2)
library(corrplot)
library(dplyr)
library(NbClust)
library(neuralnet)
install.packages("phytools")
library(phytools)
x <- fastBM(tree, sig2 = sig2, internal = TRUE)
phenogram(tree, x, spread.labels = TRUE, spread.cost = c(1, 0))
x <- fastBM(tree, sig2 = sig2, internal = TRUE)
phenogram(tree, x, spread.labels = TRUE, spread.cost = c(1, 0))
plotTree(tree)
t <- 100  # total time
n <- 30  # total taxa
b <- (log(n) - log(2))/t
tree <- pbtree(b = b, n = n, t = t, type = "discrete")
plotTree(tree)
x <- fastBM(tree, sig2 = sig2, internal = TRUE)
phenogram(tree, x, spread.labels = TRUE, spread.cost = c(1, 0))
install.packages("sde")
library(sde)
d1 <- function(t,x,theta) theta[1]*(theta[2]-x)
s1 <- function(t,x,theta) theta[3]*sqrt(x)
from <- 0.08
x <- seq(0,0.2, length=100)
sle10 <- NULL
sle2 <- NULL
sle5 <- NULL
true <- NULL
set.seed(123)
for(to in x){
sle2 <- c(sle2, dcSim(from, to, 0.5, d1, s1,
theta=c(2,0.02,0.15), M=50000,N=2))
sle5 <- c(sle5, dcSim(from, to, 0.5, d1, s1,
theta=c(2,0.02,0.15), M=50000,N=5))
sle10 <- c(sle10, dcSim(from, to, 0.5, d1, s1,
theta=c(2,0.02,0.15), M=50000,N=10))
true <- c(true, dcCIR(to, 0.5, from, c(2*0.02,2,0.15)))
}
par(mar=c(5,5,1,1))
plot(x, true, type="l", ylab="conditional density")
lines(x, sle2, lty=4)
lines(x, sle5, lty=2)
lines(x, sle10, lty=3)
legend(0.15,20, legend=c("exact","N=2", "N=5", "N=10"),
lty=c(1,2,4,3))
install.packages("MCMCpack")
library(mcmc)
library(MCMCpack)
library(phytools)
library(sde)
library(energy)
library(mcmc)
library(MCMCpack)
n = 1000
t = 100
No.Ex = 10
steps = seq(0,t,length=n+1)
rm(list = ls())
n = 1000
t = 100
No.Ex = 10
steps = seq(0,t,length=n+1)
steps
seq(1, 6, by = 3)
seq(1, 6, by = 4)
seq(0,10,101)
seq(0,10,100)
seq(0, 1, length.out = 11)
cumsum(1:10)
rnorm(n,0,sqrt(t/n))
c(0, cumsum(rnorm(n,0,sqrt(t/n))))
A = replicate(No.Ex, {
bm <- c(0, cumsum(rnorm(n,0,sqrt(t/n))))
})
View(A)
source("C:/Users/darvi/OneDrive - LUT University/Statistical Parameter Estimation/Topic 1/Exercise set 1 - Deadline Monday 24 Jan at 1200/Exercise_1_000275466.R")
cols = rainbow(No.Ex)
matplot(A, type = "l", col = cols, lty = 1)
matplot(A, type = "l", col = cols, lty = 1)
rm(list = ls())
mySum <- function(input_1, input_2 = 10) {
output <- input_1 + input_2
return(output)
}
mySum(input_1 = 2, 3)
myChange <- function(input_1, input_2 = 10) {
output <- (input_1 - input_2) / input_2
return(output)
}
myChange(14)
rm(list = ls())
mySum <- function(input_1, input_2 = 10) {
output <- input_1 + input_2
return(output)
}
mySum(input_2 = 2, input_1 = 3)
rm(list = ls())
mySum <- function(input_1, input_2 = 3) {
output <- input_1 / input_2
return(my_result)
}
mySum(15, 5)
mySum(15, 5)
rm(list = ls())
mySum <- function(input_1, input_2 = 3) {
output <- input_1 / input_2
return(my_result)
}
mySum(15, 5)
rm(list = ls())
myChange <- function(input_1, input_2 = 10) {
output <- (input_1 - input_2) / input_2
return(output)
}
myChange(input_2 = 14)
rm(list = ls())
mySum <- function(input_1, input_2 = 5) {
output <- input_1 + input_2
return(output)
}
mySum(input_two = 2, input_one = 3)
rm(list = ls())
while (i< 5) {
fval = i + 1
print(fval)
}
i <- 1
while (i< 5) {
fval = i + 1
print(fval)
}
for(i in c(1 : 6)){
fvalue[i] = 5 + i^2
print(fvalue)
}
fvalue = vector(mode = "numeric", 6)
for(i in c(1 : 6)){
fvalue[i] = 5 + i^2
print(fvalue)
}
while (x < 5) {
print(i)
i = i+1
}
-4 > -3
X <- c(3, 5, -4, 7, 11, 14)
ifelse (X>-3 & X<6, 'Normal', 'Abnormal')
ifelse (X>-5 | X<6, 'Normal', 'Abnormal')
-3 == "non-negative"
?ifelse
X = (3, -5, -2, 7, -11, 4)
rm(list = ls())
X = (3, -5, -2, 7, -11, 4)
X = (3, -5, -2, 7, -11, 4)
X = c(3, -5, -2, 7, -11, 4)
ifelse(X>0 , "non-negative", "negative")
X = c(3, -5, -2, 7, -11, 4, 0)
ifelse(X>0 , "non-negative", "negative")
0 == "non-negative"
install.packages("Rserve"")
install.packages("Rserve"")
library(Rserve)
install.packages("Rserve")
library(Rserve)
library(Rserve)
Rserve(aras = "--no-save")
# my_data = read.csv("people.csv", head = TRUE, sep = ",")
data(diamonds)
# User interface
ui = fluidPage(theme = shinytheme("cyborg"), titlePanel("Who the hell dont like Diamonds"),
sidebarLayout(
sidebarPanel(
# -------Inputs:----------
sliderInput("pricerange","Select a price range", min = 0,
max = 20000, value = c(200,5000)),
numericInput("mincarat", "Select the minimum carat", min = 0.2, max = 5.1,
value = c(0.2), step = 0.1),
checkboxGroupInput("cutsvalues", "Select all prefered cuts",
choices = c("Fair", "Good", "Very Good","Premium","Ideal"),
selected = c("Fair", "Good", "Very Good","Premium","Ideal")),
checkboxInput("cutfacetwrap", "Display plot for each cut", FALSE)
),
# -------Outputs:Show the sactter plot
mainPanel(
# img(src = "my_image.png", height = 72, width = 72),
h1("yêu hay ko yêu a hãy nói đi", align ="left"),
h2("Oh yeahhhh"),
p("Meow thương meow meow", style = "font-family:'times';font-si16pt"),
em("Em cũng thương Meow béo mập ú"),
br(),
strong("Ahihi"),
p("Sarangehe", span("Hihi", style = "color:green")),
br(),
plotOutput("myscatter")
)
)
)
server = function(input, output){
output$myscatter = renderPlot({
p = diamonds %>%
filter(price >= input$pricerange[1] & price < input$pricerange[2]) %>%
filter(carat >= input$mincarat) %>%
filter(cut %in% input$cutsvalues) %>%
ggplot(aes(x = price, y = carat, col = cut))+
geom_point()
if(input$cutfacetwrap == TRUE){
p = p+facet_wrap(~cut)
}
print(p)
})
}
shinyApp(ui , server)
library(ggplot2)
library(dplyr)
library(corrplot)
library(infotheo)
library(scales)
library(shinythemes)
library(shiny)
rm(list = ls())
# my_data = read.csv("people.csv", head = TRUE, sep = ",")
data(diamonds)
# User interface
ui = fluidPage(theme = shinytheme("cyborg"), titlePanel("Who the hell dont like Diamonds"),
sidebarLayout(
sidebarPanel(
# -------Inputs:----------
sliderInput("pricerange","Select a price range", min = 0,
max = 20000, value = c(200,5000)),
numericInput("mincarat", "Select the minimum carat", min = 0.2, max = 5.1,
value = c(0.2), step = 0.1),
checkboxGroupInput("cutsvalues", "Select all prefered cuts",
choices = c("Fair", "Good", "Very Good","Premium","Ideal"),
selected = c("Fair", "Good", "Very Good","Premium","Ideal")),
checkboxInput("cutfacetwrap", "Display plot for each cut", FALSE)
),
# -------Outputs:Show the sactter plot
mainPanel(
# img(src = "my_image.png", height = 72, width = 72),
h1("yêu hay ko yêu a hãy nói đi", align ="left"),
h2("Oh yeahhhh"),
p("Meow thương meow meow", style = "font-family:'times';font-si16pt"),
em("Em cũng thương Meow béo mập ú"),
br(),
strong("Ahihi"),
p("Sarangehe", span("Hihi", style = "color:green")),
br(),
plotOutput("myscatter")
)
)
)
server = function(input, output){
output$myscatter = renderPlot({
p = diamonds %>%
filter(price >= input$pricerange[1] & price < input$pricerange[2]) %>%
filter(carat >= input$mincarat) %>%
filter(cut %in% input$cutsvalues) %>%
ggplot(aes(x = price, y = carat, col = cut))+
geom_point()
if(input$cutfacetwrap == TRUE){
p = p+facet_wrap(~cut)
}
print(p)
})
}
shinyApp(ui , server)
as.logical(myvect)
as.logical(myvect)
myvect = c(-2,-1,0)
as.logical(myvect)
vect1*vect2
vect1 = c(1: 4)
vect2 = c(1:2)
vect1*vect2
x = c(12L,6L,10L)
median(x)
type(median(x))
x = c(12L,6L,10L)
type(median(x))
class(median(x))
indat = c("Ash", "Rd", "Ash Cir", "Ash St")
grepl("[Rd|Ave|Dr|St]", indat)
indat = c("Ash", "Rd", "Ash Cir", "Ash St")
grepl("[Rd,Ave,Dr,St]", indat)
grepl("Rd,Ave,Dr,St", indat)
grepl("Rd|Ave|Dr|St", indat)
grepl("Rd|Ave|Dr|St", indat)
v = 1:3
names(v) = c("a","b","c")
v[4] = 4
v[4]
rm(list = ls())
v = 1:3
names(v) = c("a","b","c")
v[4]
v = 1:3
names(v) = c("a","b","c")
v[4]
shiny::runApp('C:/Users/darvi/OneDrive - LUT University/Free Analytics Environment R_2022/FAER_lectures Data Set/Assignment2')
rm(list = ls())
library(shinythemes)
library(shiny)
library(countrycode)
library(ggplot2)
library(dplyr)
library(corrplot)
library(tidyverse)
library(maps)
library(mapdata)
# library(sf)
# library(terra)
# library(spData)
# library(spDataLarge)
# library(tmap)
# library(leaflet)
## Step 1: Load and view dataset
# Load dataset
data = read.csv("dataset_for_analyst_assignment_20201120.csv", head = TRUE)
# Check the structure of data
str(data)
## Step 2: Summarize the Dataset
# Summary the data
summary(data)
## Step 3: Visualize the Data
# Check which countries using Wolt services
# Results: DNK, FIN and GRC are top 3 countries using Wolt services
ggplot(data, aes(x=AVG_PURCHASE_VALUE_EUR, fill = REGISTRATION_COUNTRY)) +
geom_bar()
# Check
# Results:
ggplot(data, aes(x = MOST_COMMON_WEEKDAY_TO_PURCHASE , y = BREAKFAST_PURCHASES, col = REGISTRATION_COUNTRY)) +
geom_point(shape = 18, size = 3, alpha = 0.6) +
facet_wrap(~PREFERRED_DEVICE) +
theme_bw() +
theme(axis.title = element_text(size=14,face="bold"), axis.text = element_text(size=12))
# Check
# Results:
ggplot(data, aes(x = MOST_COMMON_WEEKDAY_TO_PURCHASE , y = LUNCH_PURCHASES, col = REGISTRATION_COUNTRY)) +
geom_point(shape = 18, size = 3, alpha = 0.6) +
facet_wrap(~PREFERRED_DEVICE) +
theme_bw() +
theme(axis.title = element_text(size=14,face="bold"), axis.text = element_text(size=12)) +
coord_quickmap()
mapdata = map_data("world")
mapdata$REGISTRATION_COUNTRY = countrycode(mapdata$region, "country.name", "iso3c")
data1 = merge(x = data, y = mapdata, by = "REGISTRATION_COUNTRY")
# ggplot(data1, aes(x = long, y = lat, group = group)) +
#   geom_polygon(aes(fill = MOST_COMMON_WEEKDAY_TO_PURCHASE),color = "black")
rm(list = ls())
library(shinythemes)
library(shiny)
library(countrycode)
library(ggplot2)
library(dplyr)
library(corrplot)
library(tidyverse)
library(maps)
library(mapdata)
library(ggplot2)
library(dplyr)
library(corrplot)
library(infotheo)
library(scales)
library(shinythemes)
library(shiny)
rm(list = ls())
# Check which countries using Wolt services and preferred device at the same time
# Results: DNK, FIN and GRC are top 3 countries using Wolt services
plt1 = ggplot(data, aes(x = REGISTRATION_COUNTRY, fill = factor(PREFERRED_DEVICE))) +
geom_bar(position = "stack")
## Step 1: Load and view dataset
# Load dataset
data = read.csv("dataset_for_analyst_assignment_20201120.csv", head = TRUE)
setwd("C:/Users/darvi/Desktop/Wolt/dataset_for_data_analyst_intern_assignment.csv")
## Step 1: Load and view dataset
# Load dataset
data = read.csv("dataset_for_analyst_assignment_20201120.csv", head = TRUE)
# Check which countries using Wolt services and preferred device at the same time
# Results: DNK, FIN and GRC are top 3 countries using Wolt services
plt1 = ggplot(data, aes(x = REGISTRATION_COUNTRY, fill = factor(PREFERRED_DEVICE))) +
geom_bar(position = "stack")
View(plt1)
plt1
data_filtered = data[data$REGISTRATION_COUNTRY %in% c("FIN", "DNK", "GRC"),]
data_filtered_sub <- subset(data_filtered, PREFERRED_DEVICE %in% c("android", "ios", "web"))
# Create the plot with filtered data and custom x-axis labels
plt2 = ggplot(data_filtered_sub, aes(x = REGISTRATION_COUNTRY, fill = factor(PREFERRED_DEVICE))) +
geom_bar(position = "stack") +
geom_text(aes(label = ..count..), stat = "count", position = position_stack(vjust = 0.5)) +
scale_x_discrete(labels = c("FIN", "DNK", "GRC"))
data_filtered_1 = data[data$REGISTRATION_COUNTRY %in% c("FIN"),]
data_filtered_sub_1 <- subset(data_filtered_1, PREFERRED_DEVICE %in% c("android", "ios", "web"))
plt3 = ggplot(data_filtered_sub_1, aes(x = MOST_COMMON_HOUR_OF_THE_DAY_TO_PURCHASE, y = PURCHASE_COUNT_DELIVERY, color = REGISTRATION_COUNTRY, linetype = PREFERRED_DEVICE)) +
stat_summary(aes(group = interaction(REGISTRATION_COUNTRY, PREFERRED_DEVICE)), fun.y = "sum", geom = "line") +
stat_summary(aes(group = interaction(REGISTRATION_COUNTRY, PREFERRED_DEVICE)), fun.y = "sum", geom = "point") +
scale_linetype_manual(values = c("solid", "dashed", "dotted")) +
labs(title = "Daily Hour Analysis for Deliveries",
x = "Day of the Week",
y = "Number of Deliveries Orders",
color = "Registration Country",
linetype = "Preferred Device") +
theme(plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
axis.title = element_text(size = 12),
legend.title = element_text(size = 12),
legend.position = "bottom")
plt4 = ggplot(data_filtered_sub_1, aes(x = MOST_COMMON_HOUR_OF_THE_DAY_TO_PURCHASE, y = PURCHASE_COUNT_TAKEAWAY, color = REGISTRATION_COUNTRY)) +
stat_summary(aes(group = REGISTRATION_COUNTRY), fun.y = "sum", geom = "line") +
stat_summary(aes(group = REGISTRATION_COUNTRY), fun.y = "sum", geom = "point") +
labs(title = "Daily Hour Analysis for Takeaway",
x = "Hour of the Day",
y = "Number of Deliveries",
color = "Registration Country") +
theme(plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
axis.title = element_text(size = 12),
legend.title = element_text(size = 12),
legend.position = "bottom")
plt5 = ggplot(data_filtered_sub_1, aes(x = MOST_COMMON_HOUR_OF_THE_DAY_TO_PURCHASE, y = PURCHASE_COUNT_TAKEAWAY, color = REGISTRATION_COUNTRY)) +
stat_summary(aes(group = REGISTRATION_COUNTRY), fun.y = "sum", geom = "line") +
stat_summary(aes(group = REGISTRATION_COUNTRY), fun.y = "sum", geom = "point") +
facet_wrap(~PREFERRED_DEVICE) +
labs(title = "Daily Hour Analysis for Takeaway",
x = "Hour of the Day",
y = "Number of Deliveries",
color = "Registration Country") +
theme(plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
axis.title = element_text(size = 12),
legend.title = element_text(size = 12),
legend.position = "bottom")
data_filtered_sub_1$ï..REGISTRATION_DATE <- format(as.Date(data_filtered_sub_1$ï..REGISTRATION_DATE), "%d")
# Create a new categorical variable based on "AVG_DAYS_BETWEEN_PURCHASES"
data_filtered_sub_1$customer_type <- cut(data_filtered_sub_1$AVG_DAYS_BETWEEN_PURCHASES,
breaks = c(-Inf, 3, 7, Inf),
labels = c("Loyal", "Regular", "Lost_Customer"))
plt6 = ggplot(data_filtered_sub_1, aes(x = ï..REGISTRATION_DATE, y = TOTAL_PURCHASES_EUR, fill = customer_type)) +
geom_bar(position = "stack", stat = "identity") +
labs(title = "Activity Churn", x = "Registration Date", y = "Total Purchases EUR by Customer Type")
plt2
plt3
plt4
plt5
plt6
